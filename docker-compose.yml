version: '3.8'

services:
  frontend:
    build:
      context: ./product-management-fe
    ports:
      - "8080:80"          # Expose the frontend on port 8080
    networks:
      - product-net
    container_name: product_management_fe
    depends_on:
      - backend            # Ensure backend starts before frontend

  backend:
    build:
      context: ./product_management_be   # Path to the backend directory
    ports:
      - "9000:9000"        # Expose the backend on port 8080
    networks:
      - product-net
    container_name: product_management_be
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}    # Using the env var for allowed origins
    env_file:
      - .env
    volumes:
      - ./static:/static  # Mount the local static directory to the container's /static
    depends_on:
      postgres:
        condition: service_healthy  # Wait for the postgres health check to pass

  postgres:
    image: postgres:17
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env
    volumes:
      - postgre-data:/var/lib/postgresql/data
      - ./init.sql:/custom-scripts/init.sql
    ports:
      - "5432:5432"        # Expose PostgreSQL on port 5432
    networks:
      - product-net
    container_name: product_management_db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

networks:
  product-net:
    driver: bridge

volumes:
  postgre-data:
    driver: local

